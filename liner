#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Nov  7 12:35:16 2016

@author: Qu
"""

import numpy as np 
import pandas as pd 
from pandas import Series,DataFrame
from sklearn.model_selection import GridSearchCV
import sklearn.linear_model as lm
import matplotlib.pyplot as plt 

train = pd.read_csv('/Users/Qu/Downloads/train.csv')
test = pd.read_csv('/Users/Qu/Downloads/test.csv')

print ("Dimension of train data {}".format(train.shape))
print ("Dimension of test data {}".format(test.shape))
print ("Basic statistical description:")
train.describe()

train.tail()
test.head()

plt.rc('font', size=13)
fig = plt.figure(figsize=(18, 8))
alpha = 0.6

ax1 = plt.subplot2grid((2,3), (0,0))
train.Age.value_counts().plot(kind='kde', color='b', label='train', alpha=alpha)
test.Age.value_counts().plot(kind='kde', color = 'r',label='test', alpha=alpha)
ax1.set_xlabel('Age')
ax1.set_title("What's the distribution of age?" )
plt.legend(loc='best')

ax2 = plt.subplot2grid((2,3), (0,1))
train.Pclass.value_counts().plot(kind='barh', color='r', label='train', alpha=alpha)
test.Pclass.value_counts().plot(kind='barh', color= 'b',label='test', alpha=alpha)
ax2.set_ylabel('Pclass')
ax2.set_xlabel('Frequency')
ax2.set_title("What's the distribution of Pclass?" )
plt.legend(loc='best')

ax3 = plt.subplot2grid((2,3), (0,2))
train.Sex.value_counts().plot(kind='barh', color='r', label='train', alpha=alpha)
test.Sex.value_counts().plot(kind='barh', color = 'b',label='test', alpha=alpha)
ax3.set_ylabel('Sex')
ax3.set_xlabel('Frequency')
ax3.set_title("What's the distribution of Sex?" )
plt.legend(loc='best')

ax4 = plt.subplot2grid((2,3), (1,0), colspan=2)
train.Fare.value_counts().plot(kind='kde', color='b', label='train', alpha=alpha)
test.Fare.value_counts().plot(kind='kde', color = 'r',label='test', alpha=alpha)
ax4.set_xlabel('Fare')
ax4.set_title("What's the distribution of Fare?" )
plt.legend(loc='best')

ax5 = plt.subplot2grid((2,3), (1,2))
train.Embarked.value_counts().plot(kind='barh', color='r', label='train', alpha=alpha)
test.Embarked.value_counts().plot(kind='barh', color= 'b',label='test', alpha=alpha)
ax5.set_ylabel('Embarked')
ax5.set_xlabel('Frequency')
ax5.set_title("What's the distribution of Embarked?" )
plt.legend(loc='best')
plt.tight_layout()

#不同年龄的存活率可视化
fig = plt.figure(figsize=(15,6))
train[train.Survived == 1].Age.value_counts().plot(kind = 'kde',color = 'r',label = 'survived',alpha = alpha)
train[train.Survived == 0].Age.value_counts().plot(kind = 'kde',color = 'b',label = 'not survived',alpha = alpha)
plt.xlabel('Age')
plt.title("what's the distruction of age in survived?")
plt.legend(loc = 'best')
plt.grid()

#性别不同的存活率
df_male = train[train.Sex == 'male'].Survived.value_counts().sort_index()
df_female = train[train.Sex == 'female'].Survived.value_counts().sort_index()
fig = plt.figure(figsize=(15,3))

ax1 = plt.subplot2grid((1,2),(0,0))
df_male.plot(kind = 'barh',color = 'b',label = 'male',alpha = alpha)
df_female.plot(kind = 'barh',color = 'r',label = 'feamle',alpha = alpha)
ax1.set_yticklabels(['died','survived'])
#ax1.set_ylabel(['survived','died'])
ax1.set_title("what's the distribution of the Sex?")
plt.legend(loc = 'best')

df_male_rate = train[train.Sex == 'male'].Survived.value_counts(normalize = True).sort_index()
df_female_rate = train[train.Sex == 'female'].Survived.value_counts(normalize = True).sort_index()

ax2 = plt.subplot2grid((1,2),(0,1))
df_male_rate.plot(kind = 'barh',color = 'b',label ='male',alpha = alpha)
df_female_rate.plot(kind = 'barh',color = 'r',label = 'feamle',alpha = alpha)
ax2.set_yticklabels(['died','survived'])
ax2.set_title("What's the survived rate with respect to sex?")
plt.legend(loc = 'best')

#阶级不同的存活率,数字越大，阶级越低
df_male = train[train.Sex == 'male']
df_female = train[train.Sex =='female']
fig = plt.figure(figsize=(18,6))
#男人中，阶级低的存活率
ax1 = plt.subplot2grid((1,4),(0,0))
df_male[df_male.Pclass == 3].Survived.value_counts().sort_index().plot(kind = 'bar',color = 'b',alpha = alpha)
ax1.set_ylabel('Frequrncy')
ax1.set_ylim((0,350))
ax1.set_xticklabels(['died','survived'])
ax1.set_title('How will low-male surivived?')
plt.grid()
#男人中，阶级高的存活率
ax2 = plt.subplot2grid((1,4),(0,1))
df_male[df_male.Pclass < 3].Survived.value_counts().sort_index().plot(kind = 'bar',color = 'b',alpha=alpha)
ax2.set_ylabel('Frequrncy')
ax2.set_ylim((0,350))
ax2.set_xticklabels(['died','survived'])
ax2.set_title('How will high-male surivived?')
plt.grid()
#女人中，阶级高的存活率
ax3 = plt.subplot2grid((1,4),(0,2))
df_female[df_female.Pclass == 3].Survived.value_counts().sort_index().plot(kind = 'bar',color = 'r',alpha=alpha)
ax3.set_ylabel('Frequrncy')
ax3.set_ylim((0,350))
ax3.set_xticklabels(['died','survived'])
ax3.set_title('How will low-female surivived?')
plt.grid()
#女人中，高阶级的存活率
ax4 = plt.subplot2grid((1,4),(0,3))
df_female[df_female.Pclass < 3].Survived.value_counts().sort_index().plot(kind = 'bar',color = 'r',alpha=alpha)
ax4.set_ylabel('Frequrncy')
ax4.set_ylim((0,350))
ax4.set_xticklabels(['died','survived'])
ax4.set_title('How will high-female surivived?')
plt.grid()

#缺失值的处理
#
train.isnull().sum()
test.isnull().sum()

#对登陆地点embarked缺失值处理
#通过盒图分析，发现  登陆地点Embarked，消费金额Fare，社会等级三项因素Pclass。
fig = plt.figure(figsize=(8, 5))
ax = fig.add_subplot(111)
ax = train.boxplot(column='Fare', by=['Embarked','Pclass'], ax=ax)
plt.axhline(y=80, color='green')
ax.set_title('', y=1.1)

train[train.Embarked.isnull()][['Fare','Pclass','Embarked']]
_ = train.set_value(train.Embarked.isnull(),'Embarked','C')

#对test的Fare缺失值处理
#可视化
fig = plt.figure(figsize=(8,5))
ax = fig.add_subplot(111)
test[(test.Pclass ==3)&(test.Embarked == 'S')].Fare.hist(bins =100,ax= ax)
test[test.Fare.isnull()][['Fare','Pclass','Embarked']]
ax.set_xlabel('Fare')
ax.set_ylabel('Frequrncy')
ax.set_title('Histogram of Fare, Plcass 3 and Embarked S')
#根据图像所知，数据集中.再求的最多数据
test[(test.Pclass ==3)&(test.Embarked == 'S')].Fare.value_counts().head()
_ = test.set_value(test.Fare.isnull(),'Fare',8.05)

Survived_cabin = train[pd.notnull(train.Cabin)].Survived.value_counts().sort_index()
Survived_noCabin = train[pd.isnull(train.Cabin)].Survived.value_counts().sort_index()

fig = plt.figure(figsize =(8,5))
ax = fig.add_subplot(111)
df = pd.DataFrame({'Cabin':Survived_cabin,'noCabin':Survived_noCabin}).transpose()
#Survived_cabin.transpose().plot(kind = 'bar',color = 'r',label = 'Survived',alpha = alpha,stacked = True)
#Survived_noCabin.transpose().plot(kind ='bar',color = 'b',label = 'died',alpha = alpha,stacked =True)
df.plot(kind = 'bar',stacked = True)
ax.set_xlabel(u'Cabain')
ax.set_ylabel('people')
ax.set_xticklabels(['nocabin','cabin'])
ax.legend(loc ='best')

#通过随机森林拟合补缺年龄缺失值
from sklearn.ensemble import RandomForestRegressor

def set_missing_ages(df):
    age_df = df[['Age','Fare','Parch','SibSp','Pclass']]
    
    known_age = age_df[age_df.Age.notnull()].as_matrix()
    unknown_age = age_df[age_df.Age.isnull()].as_matrix()
    
    y = known_age[:,0]
    X = known_age[:,1:]
    
    rfr = RandomForestRegressor(random_state = 0,n_estimators = 2000,n_jobs = -1)
    rfr.fit(X,y)
    predictAges = rfr.predict(unknown_age[:,1::])
    df.loc[df.Age.isnull(),'Age'] = predictAges
    return df,rfr

def set_cabin_type(df):
    df.loc[df.Cabin.notnull(),'Cabin'] = 'Yes'
    df.loc[df.Cabin.isnull(),'Cabin'] = 'No'
    return df

train,rfr = set_missing_ages(train)
train = set_cabin_type(train)

dummies_cabin = pd.get_dummies(train.Cabin,prefix = ['Cabin'])
dummies_Embarked = pd.get_dummies(train.Embarked,prefix = ['Embarked'])
dummies_sex = pd.get_dummies(train.Sex,prefix = ['Sex'])
dummies_Pclass = pd.get_dummies(train.Pclass,prefix = ['Pclass'])

train = pd.concat([train,dummies_cabin,dummies_Embarked,dummies_Pclass,dummies_sex],axis = 1)
train.drop(['Pclass', 'Name', 'Sex', 'Ticket', 'Cabin', 'Embarked'],axis = 1 ,inplace =True)
#将，年龄，车票付费 标准化
import sklearn.preprocessing as preprocessing

scaler =preprocessing.StandardScaler()
age_scale_param = scaler.fit(train.Age)
train['Age_scaled'] = scaler.fit_transform(train.Age,age_scale_param)
fare_scale_parem = scaler.fit(train.Fare)
train['Fare_scaled'] = scaler.fit_transform(train.Fare,fare_scale_parem)

from sklearn import linear_model

train.drop(['PassengerId','Age','Fare'],axis = 1,inplace = True)
train = train.as_matrix()

y = train[:,0]
X = train[:,1:]

clf = linear_model.LogisticRegression(C = 1.0,penalty = 'l1', tol =1e-6)
clf.fit(X,y)

#对训练集进行数据处理，以便预测
#之前处理过test.Fare的缺失值
#用随机森林拟合test缺失年龄
test,rfr = set_missing_ages(test)
#对test.Cabin处理
test = set_cabin_type(test)












